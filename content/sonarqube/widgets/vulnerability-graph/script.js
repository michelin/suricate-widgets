function run() {
  var data = {};
  var projectIssues = [];
  var sonarUrl = CATEGORY_SONAR_URL.replace(/\/+$/, "");
  var sonarToken = CATEGORY_SONAR_TOKEN;
  var projectKeys = WIDGET_PROJECT_KEY;
  var labels = [];
  var dataCritical = [];
  var dataMinor = [];
  var dataMajor = [];
  var dataInfo = [];
  var dataBlocker = [];
  var dataMinorCount = 0;
  var dataMajorCount = 0;
  var dataCriticalCount = 0;
  var dataBlockerCount = 0;
  var dataInfoCount = 0;
  var pageSize = 500;
  var projectPage = 1;
  var border = "#607D8B";
  var displayDate;
  var dateExtract;
  var dateFirstTen;

  var monthNames = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
  ];

  function zeroTest(element) {
    return element === 0;
  }

  if (WIDGET_PERIOD_UNIT) {
    var numberOfPeriods = 1;

    if (WIDGET_PERIOD_NUMBER) {
      numberOfPeriods = WIDGET_PERIOD_NUMBER;
    }

    var computedDate = new Date();

    if (WIDGET_PERIOD_UNIT === "Day") {
      computedDate.setDate(new Date().getDate() - numberOfPeriods);
    } else if (WIDGET_PERIOD_UNIT === "Week") {
      computedDate.setDate(new Date().getDate() - 7 * numberOfPeriods);
    } else if (WIDGET_PERIOD_UNIT === "Month") {
      computedDate.setMonth(new Date().getMonth() - numberOfPeriods);
    } else if (WIDGET_PERIOD_UNIT === "Year") {
      computedDate.setFullYear(new Date().getFullYear() - numberOfPeriods);
    }

    computedDate.setUTCHours(0, 0, 0, 0);

    data.fromDate =
      computedDate.getFullYear() +
      "-" +
      ("0" + (computedDate.getMonth() + 1)).slice(-2) +
      "-" +
      ("0" + computedDate.getUTCDate()).slice(-2);
  }

  var projectPage = 1;
  var pageSize = 500;
  var response = getIssuesFromSonarqube(
    sonarUrl,
    sonarToken,
    projectKeys,
    pageSize,
    projectPage,
    data.fromDate
  );

  if (response && response.issues && response.issues.length > 0) {
    projectIssues = response.issues;

    while (
      response.paging.total >
      response.paging.pageIndex * response.paging.pageSize
    ) {
      projectPage++;

      response = getIssuesFromSonarqube(
        sonarUrl,
        sonarToken,
        projectKeys,
        pageSize,
        projectPage,
        data.fromDate
      );

      projectIssues = projectIssues.concat(response.issues);
    }
  }

  projectIssues.forEach(function (issue) {
    dateExtract = new Date(issue.creationDate);

    dateFirstTen =
      dateExtract.getFullYear() +
      "-" +
      ("0" + (dateExtract.getMonth() + 1)).slice(-2) +
      "-" +
      ("0" + dateExtract.getUTCDate()).slice(-2);

    if (WIDGET_PERIOD_UNIT == "Day") {
      displayDate = dateFirstTen;
    } else if (WIDGET_PERIOD_UNIT == "Week") {
      displayDate = dateFirstTen;
    } else if (WIDGET_PERIOD_UNIT == "Month") {
      displayDate =
        monthNames[dateExtract.getMonth()] + "," + dateExtract.getFullYear();
    } else if (WIDGET_PERIOD_UNIT == "Year") {
      displayDate = dateExtract.getFullYear();
    }

    var severityVal = issue.severity;

    if (labels.indexOf(displayDate) == -1) {
      labels.push(displayDate);

      if (severityVal === "MINOR") {
        if (labels.length == 0) {
          dataMinorCount = 1;
        } else {
          dataMinorCount++;
        }
        dataMinor.push(dataMinorCount);

        dataCritical.push(dataCriticalCount);
        dataMajor.push(dataMajorCount);
        dataBlocker.push(dataBlockerCount);
        dataInfo.push(dataInfoCount);
      }

      if (severityVal === "CRITICAL") {
        if (labels.length == 0) {
          dataCriticalCount = 1;
        } else {
          dataCriticalCount++;
        }
        dataCritical.push(dataCriticalCount);

        dataMinor.push(dataMinorCount);
        dataMajor.push(dataMajorCount);
        dataBlocker.push(dataBlockerCount);
        dataInfo.push(dataInfoCount);
      }

      if (severityVal === "MAJOR") {
        if (labels.length == 0) {
          dataMajorCount = 1;
        } else {
          dataMajorCount++;
        }
        dataMajor.push(dataMajorCount);

        dataCritical.push(dataCriticalCount);
        dataMinor.push(dataMinorCount);
        dataBlocker.push(dataBlockerCount);
        dataInfo.push(dataInfoCount);
      }

      if (severityVal === "BLOCKER") {
        if (labels.length == 0) {
          dataBlockerCount = 1;
        } else {
          dataBlockerCount++;
        }
        dataBlocker.push(dataBlockerCount);

        dataMinor.push(dataMinorCount);
        dataMajor.push(dataMajorCount);
        dataCritical.push(dataCriticalCount);
        dataInfo.push(dataInfoCount);
      }

      if (severityVal === "INFO") {
        if (labels.length == 0) {
          dataInfoCount = 1;
        } else {
          dataInfoCount++;
        }
        dataInfo.push(dataInfoCount);

        dataCritical.push(dataCriticalCount);
        dataMinor.push(dataMinorCount);
        dataMajor.push(dataMajorCount);
        dataBlocker.push(dataBlockerCount);
      }
    } else {
      if (severityVal === "MINOR") {
        dataMinor.pop();
        dataMinorCount++;
        dataMinor.push(dataMinorCount);
      }

      if (severityVal === "CRITICAL") {
        dataCritical.pop();
        dataCriticalCount++;
        dataCritical.push(dataCriticalCount);
      }

      if (severityVal === "MAJOR") {
        dataMajor.pop();
        dataMajorCount++;
        dataMajor.push(dataMajorCount);
      }

      if (severityVal === "BLOCKER") {
        dataBlocker.pop();
        dataBlockerCount++;
        dataBlocker.push(dataBlockerCount);
      }

      if (severityVal === "INFO") {
        dataInfo.pop();
        dataInfoCount++;
        dataInfo.push(dataInfoCount);
      }
    }
  });

  data.labels = JSON.stringify(labels);
  data.dataInfo = JSON.stringify(dataInfo.every(zeroTest) ? [] : dataInfo);
  data.dataMinor = JSON.stringify(dataMinor.every(zeroTest) ? [] : dataMinor);
  data.dataBlocker = JSON.stringify(
    dataBlocker.every(zeroTest) ? [] : dataBlocker
  );
  data.dataMajor = JSON.stringify(dataMajor.every(zeroTest) ? [] : dataMajor);
  data.dataCritical = JSON.stringify(
    dataCritical.every(zeroTest) ? [] : dataCritical
  );

  data.border = JSON.stringify(border);

  return JSON.stringify(data);
}

function getIssuesFromSonarqube(
  sonarUrl,
  sonarToken,
  projectKeys,
  pageSize,
  projectPage,
  fromDate
) {
  var sonarApiUrl =
    sonarUrl +
    "/api/issues/search?"+ (WIDGET_BRANCH != null ? "branch=" + WIDGET_BRANCH + "&" : (WIDGET_PULL_REQUEST != null ? "pullRequest=" + WIDGET_PULL_REQUEST + "&" : "")) +
    "types=VULNERABILITY&componentKeys=" +
    projectKeys +
    "&ps=" +
    pageSize +
    "&p=" +
    projectPage +
    "&s=CREATION_DATE&asc=true&statuses=OPEN,REOPENED";

  if (fromDate) {
    sonarApiUrl = sonarApiUrl + "&createdAfter=" + fromDate;
  }

  return JSON.parse(
    Packages.get(
      sonarApiUrl,
      "Authorization",
      "Basic " + Packages.btoa(sonarToken + ":")
    )
  );
}
