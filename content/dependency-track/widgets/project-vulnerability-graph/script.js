function run() {
  var data = {};
  var labels = [];
  var dataCritical = [];
  var dataHigh = [];
  var dataMedium = [];
  var dataLow = [];
  var dataUnassigned = [];

  var startDate = computeStartDate();
  data.sinceDate = formatDate(startDate);
  data.fromDate = formatDateWithHyphens(startDate);
  data.project = JSON.parse(
    Packages.get(WIDGET_CONFIG_DT_URL + "/api/v1/project/lookup?name=" + SURI_PROJECT + "&version=" + SURI_PROJECT_VERSION,
  			"X-API-KEY",
  			WIDGET_CONFIG_DT_API_KEY));
  var uuid = data.project.uuid;

  var responses = JSON.parse(
  	Packages.get(WIDGET_CONFIG_DT_URL + "/api/v1/metrics/project/" + uuid + "/since/" + data.sinceDate,
  			"X-API-KEY",
             WIDGET_CONFIG_DT_API_KEY));

  var resLen = responses.length;
  responses.forEach(function (response) {
        var firstOccurrenceDate = formatDateWithHyphens(new Date(response.firstOccurrence));
        labels.push(firstOccurrenceDate < data.fromDate ?  data.fromDate : firstOccurrenceDate);
        dataCritical.push(response.critical);
        dataHigh.push(response.high);
        dataMedium.push(response.medium);
        dataLow.push(response.low);
        dataUnassigned.push(response.unassigned);
  });

  if(resLen > 0){
        var lastOccurrenceDate = formatDateWithHyphens(new Date(responses[resLen-1].lastOccurrence));
        labels.push(lastOccurrenceDate);
        dataCritical.push(responses[resLen-1].critical);
        dataHigh.push(responses[resLen-1].high);
        dataMedium.push(responses[resLen-1].medium);
        dataLow.push(responses[resLen-1].low);
        dataUnassigned.push(responses[resLen-1].unassigned);
  }

  data.labels = JSON.stringify(labels);
  data.dataCritical = JSON.stringify(dataCritical);
  data.dataHigh = JSON.stringify(dataHigh);
  data.dataMedium = JSON.stringify(dataMedium);
  data.dataLow = JSON.stringify(dataLow);
  data.dataUnassigned = JSON.stringify(dataUnassigned);
  return JSON.stringify(data);
}

/**
 * Compute the start date of the releases from the widget parameters
 * @returns {string}
 */
function computeStartDate() {
    var computedDate = new Date();
	if (SURI_PERIOD) {
		var numberOfPeriods = 1;
		if (SURI_NUMBER_OF_PERIOD) {
			numberOfPeriods = SURI_NUMBER_OF_PERIOD;
		}
        if (SURI_PERIOD === "Day") {
            computedDate.setDate(new Date().getDate() - numberOfPeriods);
        } else if (SURI_PERIOD === "Week") {
			computedDate.setDate(new Date().getDate() - 7 * numberOfPeriods);
		} else if (SURI_PERIOD === "Month") {
			computedDate.setMonth(new Date().getMonth() - numberOfPeriods);
		} else if (SURI_PERIOD === "Year") {
			computedDate.setFullYear(new Date().getFullYear() - numberOfPeriods);
		}

		computedDate.setUTCHours(0, 0, 0, 0);
	}
	return computedDate;
}

/**
 * Format the date to keep YYYYMMdd
 */
function formatDate(date) {
	return new Date(date).getFullYear()
		+ ("0" + (new Date(date).getMonth() + 1)).slice(-2)
		+ ("0" + new Date(date).getUTCDate()).slice(-2);
}

/**
 * Format the date to keep yyyy-MM-dd
 */
function formatDateWithHyphens(date) {
	return new Date(date).getFullYear()
		+ "-"
		+ ("0" + (new Date(date).getMonth() + 1)).slice(-2)
		+ "-"
		+ ("0" + new Date(date).getUTCDate()).slice(-2);
}

function zeroTest(element) {
    return element === 0;
}
